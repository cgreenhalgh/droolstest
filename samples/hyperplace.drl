#created on: 22-Jun-2010
# Hyperplace-proxy facts

package uk.ac.horizon.ug.hyperplace.facts

import uk.me.jstott.jcoord.LatLng
import uk.ac.horizon.ug.exserver.model.ClientConversation
import uk.ac.horizon.ug.exserver.model.ConversationStatus

// distance function - metres
function double geoDistance(double lat1, double lng1, double lat2, double lng2) {
	LatLng c1 = new LatLng(lat1, lng1), c2 = new LatLng(lat2, lng2);
	return 1000*c1.distance(c2);
}

// hyperplace main client type
declare HyperplaceClient
	@client // client type
	id : String @key 
end

// tab to show
declare HyperplaceTab
	@message // kind of sent to HyperplaceClients
	standard : boolean // for all clients
	clientId : String @to("HyperplaceClient") // may be null for standard
	name : String
	type : String // probably a fixed set of options?! (HPActionTab, HPARTab, HPDebugTab, HPWebTab, HPMapTab)
	stateGroup : String // defaults Action AR Map
	rank : float // to sort
	icon : String @type("URL")
end

// asset to cache
declare HyperplaceAsset 
	@message // kind of sent to HyperplaceClients
	standard : boolean // for all clients
	clientId : String @to("HyperplaceClient") // may be null for standard
	url : String @type("URL")
end

// action for user
declare HyperplaceAction
	@message // kind of sent to HyperplaceClients
	standard : boolean // for all clients
	clientId : String @to("HyperplaceClient") // may be null for standard
	title : String
	actionName : String // would be Class name in hyperplace
	// ...
end

// message to user
declare HyperplaceMessage
	@message // kind of sent to HyperplaceClients
	standard : boolean // for all clients
	clientId : String @to("HyperplaceClient") // may be null for standard
	message : String
	vibrate : int // duration
	dialog : boolean // dialog (rather than toast) message (may not be supported in Hyperplace client)
	dialogTitle : String // dialog title (may not be supported in Hyperplace client)
	dialogButtonText : String // (may not be supported in Hyperplace client)
	dialogIcon : String // (may not be supported in Hyperplace client)
end


// action by user
declare HyperplaceActionPerformed
	@message
	time : long
	clientId : String @msgfrom("HyperplaceClient") // can't use 'from' as it is a DRL keyword
	actionName : String // would be Class name in hyperplace
	jsonData : String // should be more structured?!
	// ...	
end

// a position of something (e.g. reported by client, or of a virtual target)
// NB This name is magic for the GeoPositionViewLayout
declare GeoPosition
	@sensed
	@message
	time : long
	// NB These field names are magic for the GeoPositionViewLayout
	subjectId : String @subject("HyperplaceClient,HyperplaceMapPin,GeoTarget") 
	latitude : double
	longitude : double
	provider : String // e.g. "gps" - optional
	accuracy : double // metres
end

// a "pin" on the map. Position is provided by GeoPosition
declare HyperplaceMapPin
	@entity
	@describedbyauthor 
	id : String @key
	label : String // required
	icon : String @type("URL") // required
	dialogMessage : String // optional
end


rule "Say hello to test"
	dialect "mvel"
	when
		$ap : HyperplaceActionPerformed( actionName=="Test action" )
	then
		HyperplaceMessage m = new HyperplaceMessage();
		m.clientId = $ap.clientId;
		m.dialog = false;
		m.message = "Hello - you did a test action!";
		m.vibrate = 1;
		insert( m );
		HyperplaceAction a = new HyperplaceAction();
		a.clientId = $ap.clientId;
		a.title = "A dynamic action";
		a.actionName = "DynamicTestAction";
		insert( a );
end

rule "remove old positions"
	dialect "mvel"
	when 
		$gp : GeoPosition( )
		$ngp : GeoPosition( subjectId==$gp.subjectId, time>$gp.time )
	then
		retract ( $gp )
end

rule "show distance to pins"
	dialect "mvel"
	when
		$cc : ClientConversation( clientType=="Hyperplace", status==ConversationStatus.ACTIVE )
		$gp : GeoPosition( subjectId==$cc.clientId )
		$mp : HyperplaceMapPin( )
		$mgp : GeoPosition( subjectId==$mp.id )
	then
		HyperplaceAction ac = new HyperplaceAction();
		ac.clientId = $cc.clientId;
		ac.title = "To "+$mp.label+": "+geoDistance($gp.latitude, $gp.longitude, $mgp.latitude, $mgp.longitude)+"m";
		ac.actionName = "Show "+$mp.id;
		insertLogical( ac );
end

rule "show hyperplace clients as pins"
	dialect "mvel"
	when
		$cc : ClientConversation( clientType=="Hyperplace", status==ConversationStatus.ACTIVE )
	then
		HyperplaceMapPin mp = new HyperplaceMapPin();
		mp.id = $cc.clientId;
		mp.label = "Client "+$cc.clientId;
		insertLogical ( mp );		
end
